.. Defining Views

================
ビューを定義する
================

.. A :term:`view callable` in a :app:`Pyramid` application is typically a simple
.. Python function that accepts a single parameter named :term:`request`.  A
.. view callable is assumed to return a :term:`response` object.

:app:`Pyramid` アプリケーションの :term:`view callable` (訳: 呼び出し可能なビュー)
は通常、 :term:`request` という名前の1つのパラメータを受け入れるシンプルなPythonの関数です。
呼び出し可能なビューは :term:`response` オブジェクトを返すことが想定されます。


.. The request object passed to every view that is called as the result of a
.. route match has an attribute named ``matchdict`` that contains the elements
.. placed into the URL by the ``pattern`` of a ``route`` statement.  For
.. instance, if a call to :meth:`pyramid.config.Configurator.add_route` in
.. ``__init__.py`` had the pattern ``{one}/{two}``, and the URL at
.. ``http://example.com/foo/bar`` was invoked, matching this pattern, the
.. ``matchdict`` dictionary attached to the request passed to the view would
.. have a ``'one'`` key with the value ``'foo'`` and a ``'two'`` key with the
.. value ``'bar'``.

リクエストオブジェクトはルートのマッチの結果として呼び出される全てのビューに渡される ``ルート`` 文の
``パターン`` によりURLに置かれた要素が格納されている ``matchdict`` という名前の属性を持っている。
例えば、 ``__init__.py`` の :meth:`pyramid.config.Configurator.add_route` の呼び出しに
``{one}/{two}`` というパターンがあり、 ``http://example.com/foo/bar`` というURLが呼び出された場合、
このパターンに一致し、 ``'foo'`` という値が ``'one'`` というキーに、 ``'bar'`` という値が ``'two'`` というキーに割り当てられた
``matchdict`` という辞書がリクエストに付け加えられてビューに渡されます。


.. The source code for this tutorial stage can be browsed at
.. `http://github.com/Pylons/pyramid/tree/1.3-branch/docs/tutorials/wiki2/src/views/
.. <http://github.com/Pylons/pyramid/tree/1.3-branch/docs/tutorials/wiki2/src/views/>`_.

このチュートリアルステージのソースコードを閲覧することができます。
`http://github.com/Pylons/pyramid/tree/1.3-branch/docs/tutorials/wiki2/src/views/
<http://github.com/Pylons/pyramid/tree/1.3-branch/docs/tutorials/wiki2/src/views/>`_.


.. Declaring Dependencies in Our ``setup.py`` File

``setup.py`` ファイルに依存関係を宣言する
===============================================

.. The view code in our application will depend on a package which is not a
.. dependency of the original "tutorial" application.  The original "tutorial"
.. application was generated by the ``pcreate`` command; it doesn't know
.. about our custom application requirements.  

私たちのアプリケーションのビューのコードはオリジナルの "チュートリアル" アプリケーションの依存関係にはないパッケージに依存します。
オリジナルの "チュートリアル" アプリケーションは ``pcreate`` によって生成されました。
それは私たちのカスタムアプリケーションに必要なものを知りません。


.. We need to add a dependency on the ``docutils`` package to our ``tutorial``
.. package's ``setup.py`` file by assigning this dependency to the ``requires`` parameter in ``setup()``.

私たちは ``docutils`` パッケージへの依存を私たちの ``tutorial`` パッケージの ``setup.py`` ファイルにある
``setup`` 関数内の ``requires`` パラメータにこの依存関係を割り当てる必要があります。


Open ``tutorial/setup.py`` and edit it to look like the following:


.. literalinclude:: src/views/setup.py
   :linenos:
   :language: python
   :emphasize-lines: 17

(Only the highlighted line needs to be added.)

Running ``setup.py develop``
============================

.. Since a new software dependency was added, you will need to rerun ``python
.. setup.py develop`` inside the root of the ``tutorial`` package to obtain and
.. register the newly added dependency distribution.

新しいソフトウェア依存関係が追加されたので、新たに追加された依存パッケージを登録および取得するために
``tutorial`` パッケージのルート内で ``python setup.py develop`` を再実行する必要があります。


Make sure your current working directory is the root of the project (the
directory in which setup.py lives) and execute the following command.

On UNIX:

.. code-block:: text

   $ cd tutorial
   $ ../bin/python setup.py develop

On Windows:

.. code-block:: text

   c:\pyramidtut> cd tutorial
   c:\pyramidtut\tutorial> ..\Scripts\python setup.py develop

Success executing this command will end with a line to the console something
like::

   Finished processing dependencies for tutorial==0.0

Changing the ``views.py`` File
==============================

It's time for a major change.  Open ``tutorial/tutorial/views.py`` and edit it to look like the following:

.. literalinclude:: src/views/tutorial/views.py
   :linenos:
   :language: python
   :emphasize-lines: 1-7,12,15-70

(The highlighted lines are the ones that need to be added or edited.)

We got rid of the ``my_view`` view function and its decorator that was
added when we originally rendered the ``alchemy`` scaffold.  It was only an
example and isn't relevant to our application.

Then we added four :term:`view callable` functions to our ``views.py``
module: 

* ``view_wiki()`` - Displays the wiki itself. It will answer on the root URL.
* ``view_page()`` - Displays an individual page.
* ``add_page()`` - Allows the user to add a page.
* ``edit_page()`` - Allows the user to edit a page.

We'll describe each one briefly and show the resulting ``views.py`` file
afterward.

.. .. note::

..   There is nothing special about the filename ``views.py``.  A project may
..   have many view callables throughout its codebase in arbitrarily-named
..   files.  Files implementing view callables often have ``view`` in their
..   filenames (or may live in a Python subpackage of your application package
..   named ``views``), but this is only by convention.

.. note::

   ``views.py`` のファイル名は自動的に付けられ、特別な意味はありません。
   プロジェクトは任意の名前のファイルにそのコードベース全体の多くのビューを持っているかもしれません。
   モデルを実装するファイルは多くの場合 ``view`` というファイル名を持っています
   (もしくはあなたの ``views`` アプリケーションパッケージのPythonのサブパッケージにいます)が、これは慣例です。


.. The ``view_wiki`` view function

ビュー関数 ``view_wiki``
-------------------------------

.. ``view_wiki()`` is the :term:`default view` that gets called when a request 
.. is made to the root URL of our wiki.  It always redirects to
.. a URL which represents the path to our "FrontPage".

``view_wiki()`` は私たちのwikiのルートURLにリクエストが行われたときに呼び出される :term:`default view` です。
それは常に私たちの "FrontPage" へのパスを表すURLにリダイレクトします。


.. literalinclude:: src/views/tutorial/views.py
   :lines: 18-21
   :linenos:
   :language: python


.. ``view_wiki()`` returns an instance of the
.. :class:`pyramid.httpexceptions.HTTPFound` class (instances of which implement
.. the :class:`pyramid.interfaces.IResponse` interface like
.. :class:`pyramid.response.Response` does).

``view_wiki()`` は :class:`pyramid.httpexceptions.HTTPFound` クラスのインスタンスを返します。
(:class:`pyramid.response.Response` みたいに :class:`pyramid.interfaces.IResponse` インターフェースを実装したインスタンス)


.. It uses the :meth:`pyramid.request.Request.route_url` API to construct a 
.. URL to the ``FrontPage`` page (e.g. ``http://localhost:6543/FrontPage``), which 
.. is used as the "location" of the HTTPFound response, forming an HTTP redirect.

それは ``FrontPage`` ページ(例えば ``http://localhost:6543/FrontPage``)のURLを構築するために
:meth:`pyramid.request.Request.route_url` APIを使用します。
それと、HTTPFoundレスポンスの "location" として使用し、HTTPリダイレクトを形成します。


.. The ``view_page`` view function

ビュー関数 ``view_page``
-------------------------------

.. ``view_page()`` is used to display a single page of our
.. wiki.  It renders the :term:`ReStructuredText` body of a page (stored as
.. the ``data`` attribute of a Page object) as HTML.  Then it substitutes an
.. HTML anchor for each *WikiWord* reference in the rendered HTML using a
.. compiled regular expression.

``view_page()`` は私たちのwikiの単一のページを表示するために使用します。
これは :term:`ReStructuredText` で書かれたページの内容をHTMlとしてレンダリングします。
その後、これはコンパイル済み正規表現を使用して、レンダリング済みのHTMLの中の各
*WikiWord* 参照をHTMLのアンカー(訳注: <a>タグ)に置換します。


.. literalinclude:: src/views/tutorial/views.py
   :lines: 23-43
   :linenos:
   :language: python


.. The curried ``check()`` function is used as the first argument to
.. ``wikiwords.sub``, indicating that it should be called to provide a value for
.. each WikiWord match found in the content.  If the wiki already contains a
.. page with the matched WikiWord name, ``check()`` generates a view
.. link to be used as the substitution value and returns it.  If the wiki does
.. not already contain a page with with the matched WikiWord name, ``check()``
.. generates an "add" link as the substitution value and returns it.

カリー化された関数 ``check()`` は ``wikiwords.sub`` の最初の引数として使用されます。
それはコンテンツにある各WikiWordのマッチを発見するための値を提供するために呼び出す必要があることを示しています。
もし、マッチしたWikiWord名を持つページがwikiにすでに含まれている場合、
``check()`` は代わりの値としてビューへのリンクを生成してそれを返します。
もし、マッチしたWikiWord名を持つページがwikiにまだ含まれていない場合、
関数は代わりの値として "add" へのリンクを生成してそれを返します。


.. As a result, the ``content`` variable is now a fully formed bit of HTML
.. containing various view and add links for WikiWords based on the content of
.. our current page object.

結果として、 ``content`` 変数は現在様々なビューを含むHTMLの完全な形式で、
私たちの現在のページオブジェクトに基づいてWikiWordへのリンクを追加します。


.. We then generate an edit URL (because it's easier to do here than in the
.. template), and we return a dictionary with a number of arguments.  The fact
.. that ``view_page()`` returns a dictionary (as opposed to a :term:`response`
.. object) is a cue to :app:`Pyramid` that it should try to use a :term:`renderer`
.. associated with the view configuration to render a template.  In our case,
.. the template which will be rendered will be the ``templates/view.pt``
.. template, as indicated in the ``@view_config`` decorator that is applied to
.. ``view_page()``.

その後、編集するURLを生成し、(テンプレートの中よりもここで行うほうが簡単だからです)
引数の数と辞書を返します。
このビューが辞書(:term:`response` オブジェクトではなく)を返すという事実は
テンプレートをレンダリングするビュー設定で関連付けられた :term:`renderer` 使用しようとする必要があると :app:`Pyramid` に知らせます。
私たちの場合、レンダリングされるテンプレートは as indicated in the ``@view_config`` decorator that is applied to ``view_page()``, ``templates/view.pt`` テンプレートになります。


.. The ``add_page`` view function

ビュー関数 ``add_page``
------------------------------

.. ``add_page()`` is invoked when a user clicks on a *WikiWord* which
.. isn't yet represented as a page in the system.  The ``check`` function
.. within the ``view_page`` view generates URLs to this view.
.. ``add_page()`` also acts as a handler for the form that is generated
.. when we want to add a page object.  The ``matchdict`` attribute of the
.. request passed to the ``add_page()`` view will have the values we need
.. to construct URLs and find model objects.

*WikiWord* をユーザーがクリックしたときに、まだシステム内のページとして表されていないときに ``add_page()`` 関数が呼び出されます。
このビューへのURLは ``view_page`` ビュー内の ``check`` 関数が生成します。
これはまた、ページオブジェクトを追加するときに生成されるフォームのハンドラとして機能します。
``add_page()`` ビューに渡されるリクエストの ``matchdict`` 属性はURL及びモデルオブジェクトを探すのに必要な値を持ちます。


.. literalinclude:: src/views/tutorial/views.py
   :lines: 45-56
   :linenos:
   :language: python


.. The ``matchdict`` will have a ``'pagename'`` key that matches the name of
.. the page we'd like to add.  If our add view is invoked via,
.. e.g. ``http://localhost:6543/add_page/SomeName``, the value for
.. ``'pagename'`` in the ``matchdict`` will be ``'SomeName'``.

``matchdict`` は私たちの追加したいページの名前に一致する ``'pagename'`` キーを持つことになります。
もし、私たちの追加ビューが例えば ``http://localhost:6543/add_page/SomeName`` 経由で呼び出された場合、
``matchdict`` の中の ``'pagename'`` の値は ``'SomeName'`` になります。


.. If the view execution is *not* a result of a form submission (i.e. the
.. expression ``'form.submitted' in request.params`` is ``False``), the view
.. callable renders a template.  To do so, it generates a "save url" which the
.. template uses as the form post URL during rendering.  We're lazy here, so
.. we're going to use the same template (``templates/edit.pt``) for the add
.. view as well as the page edit view. To do so we create a dummy Page object
.. in order to satisfy the edit form's desire to have *some* page object
.. exposed as ``page``. :app:`Pyramid` will render the template associated
.. with this view to a response.

もしビューの実行にフォーム送信の結果が *無い* 場合、(つまり評価式 ``'form.submitted' in request.params`` が ``False`` なら)呼び出し可能ビューはテンプレートをレンダリングします。
そのためには、テンプレートのレンダリング時にフォームのポストのURLとして使用する "save url" を生成します。
私たちはここで怠けます。
同じテンプレート (``templates/edit.pt``) を追加ビューだけでなく、ページ編集ビューに使用しようとしています。
編集フォームの要求を満たすために ``page`` として公開される、 *なんらかの* ページオブジェクトを持っているダミーPageオブジェクトを作成します。
そして、 :app:`Pyramid` はレスポンスとしてこのビューに関連付けられているテンプレートをレンダリングします。


.. If the view execution *is* a result of a form submission (i.e. the expression
.. ``'form.submitted' in request.params`` is ``True``), we scrape the page body
.. from the form data, create a Page object with this page body and the name
.. taken from ``matchdict['pagename']``, and save it into the database using
.. ``DBSession.add``.  We then redirect back to the ``view_page`` view for the
.. newly created page.

もしビューの実行にフォーム送信の結果が *ある* 場合、(つまり評価式 ``'form.submitted' in request.params`` が ``True`` なら)
フォームデータからページの本体を取り出し、 Pageオブジェクトをこのページの本体と ``matchdict['pagename']``
から取り出した名前から作成し、 ``DBSession.add`` を使ってそれをデータベースに保存します。
その後、新しく作成したページの ``view_page`` ビューにリダイレクトします。


.. The ``edit_page`` view function

ビュー関数 ``edit_page``
-------------------------------

.. ``edit_page()`` is invoked when a user clicks the "Edit this
.. Page" button on the view form.  It renders an edit form but it also acts as
.. the handler for the form it renders.  The ``matchdict`` attribute of the
.. request passed to the ``edit_page`` view will have a ``'pagename'`` key
.. matching the name of the page the user wants to edit.

ユーザーがビューフォームの "Edit this Page" ボタンをクリックしたときに ``edit_page()`` が呼び出されます。
これは編集フォームをレンダリングしますが、これはまた、フォームをレンダリングするハンドラとして機能します。
``edit_page`` ビューに渡されるリクエストの ``matchdict`` 属性はユーザーが編集するページの名前に一致する
``'pagename'`` キーを持つことになります。


.. literalinclude:: src/views/tutorial/views.py
   :lines: 58-70
   :linenos:
   :language: python


.. If the view execution is *not* a result of a form submission (i.e. the
.. expression ``'form.submitted' in request.params`` is ``False``), the view
.. simply renders the edit form, passing the page object and a ``save_url``
.. which will be used as the action of the generated form.

もしビューの実行にフォーム送信の結果が *無い* 場合、(つまり評価式 ``'form.submitted' in request.params`` が ``False`` なら)ビューは単に編集フォームをレンダリングします。
また、生成されたフォームのアクションとして使用するために、ページオブジェクトと ``save_url`` を渡します。


.. If the view execution *is* a result of a form submission (i.e. the expression
.. ``'form.submitted' in request.params`` is ``True``), the view grabs the
.. ``body`` element of the request parameters and sets it as the ``data``
.. attribute of the page object.  It then redirects to the ``view_page`` view
.. of the wiki page.

もしビューの実行にフォーム送信の結果が *ある* 場合、(つまり評価式 ``'form.submitted' in request.params`` が ``True`` なら)
ビューはリクエストパラメータの ``body`` 要素を取得し、ページオブジェクトの ``data`` 属性としてそれをセットします。
その次にwikiページの ``view_page`` ビューにリダイレクトします。


.. Adding Templates

テンプレートの追加
==================

.. The views we've added all reference a :term:`template`.  Each template is a
.. :term:`Chameleon` :term:`ZPT` template.  These templates will live in the
.. ``templates`` directory of our tutorial package.

私たちのビューにあるすべてのテンプレートのリファレンスを追加しました。
各テンプレートは :term:`Chameleon` :term:`ZPT` テンプレートです。
これらのテンプレートは私たちのチュートリアルパッケージの ``templates`` ディレクトリの中にあります。


.. The ``view.pt`` Template

``view.pt`` テンプレート
------------------------

.. The ``view.pt`` template is used for viewing a single wiki page.  It
.. is used by the ``view_page`` view function.  It should have a ``div``
.. that is "structure replaced" with the ``content`` value provided by
.. the view.  It should also have a link on the rendered page that points
.. at the "edit" URL (the URL which invokes the ``edit_page`` view for
.. the page being viewed).

``view.pt`` テンプレートは単一のwikiページを表示するために使用されています。
これは ``view_page`` ビュー関数によって使用されています。
ビューによって提供される ``content`` 値で "構造が置き換えられる" ``div``(訳注: <div>タグ)を持っている必要があります。
また、レンダリングされたページに "編集" URLを指すリンクがある必要もあります。(表示されているページのための ``edit_page`` ビューを呼び出すURL)


.. Once we're done with the ``view.pt`` template, it will look a lot like the
.. below:

一旦 ``view.pt`` テンプレートは完了です。これは以下のように見えます:


.. literalinclude:: src/views/tutorial/templates/view.pt
   :language: xml


.. .. note:: The names available for our use in a template are always
..    those that are present in the dictionary returned by the view
..    callable.  But our templates make use of a ``request`` object that
..    none of our tutorial views return in their dictionary.  This value
..    appears as if "by magic".  However, ``request`` is one of several
..    names that are available "by default" in a template when a template
..    renderer is used.  See :ref:`chameleon_template_renderers` for more
..    information about other names that are available by default in a
..    template when a Chameleon template is used as a renderer.

.. note::

   テンプレートで私たちが使用可能な名前は、常に呼び出し可能ビューによって返された辞書の中にあるものです。
   しかし、私たちはテンプレートで ``request`` オブジェクトを利用しますが、私たちのチュートリアルのビューのいずれも辞書には返されません。
   この値は "魔法によるもの" かのように現れます。
   ただし、 ``request`` はテンプレートレンダラが使用されているときのテンプレート内で "デフォルトで" 利用可能ないくつかの名前の1つです。
   レンダラとしてChameleonテンプレートを使用しているときにテンプレート内でデフォルトで利用可能な他の名前についての詳細については
   :ref:`chameleon_template_renderers` を参照してください。


.. The ``edit.pt`` Template

``edit.pt`` テンプレート
------------------------

.. The ``edit.pt`` template is used for adding and editing a wiki page.  It is
.. used by the ``add_page`` and ``edit_page`` view functions.  It should display
.. a page containing a form that POSTs back to the "save_url" argument supplied
.. by the view.  The form should have a "body" textarea field (the page data),
.. and a submit button that has the name "form.submitted".  The textarea in the
.. form should be filled with any existing page data when it is rendered.

``edit.pt`` テンプレートはwikiページの追加または編集に使用されています。
これはビュー関数 ``add_page`` と ``edit_page`` から使用されています。
ビューによって提供される "save_url" 引数にポストバックされるフォームを含んでいるページが表示されます。
フォームは "body" テキストエリアフィールドをもっていなければなりません。(ページのデータ)
また、 "form.submitted" という名前の送信ボタンを持っています。
それがレンダリングされたときにフォームのテキストエリアはすべて既存のページのデータで埋められるはずです。

.. Once we're done with the ``edit.pt`` template, it will look a lot like
.. the following:

一旦 ``edit.pt`` テンプレートは完了です。これは以下のように見えます:


.. literalinclude:: src/views/tutorial/templates/edit.pt
   :language: xml


.. Static Assets

静的なアセット
--------------

.. Our templates name a single static asset named ``pylons.css``.  We don't need
.. to create this file within our package's ``static`` directory because it was
.. provided at the time we created the project. This file is a little too long
.. to replicate within the body of this guide, however it is available `online
.. <http://github.com/Pylons/pyramid/blob/master/docs/tutorials/wiki2/src/views/tutorial/static/pylons.css>`_.

私たちのテンプレートは ``pylons.css`` という名前の1つの静的なアセットに名前を付けます。
これは私たちのプロジェクトを作成した時点で提供されていたので、私たちのパッケージの
``static`` ディレクトリ内でこのファイルを作成する必要はありません。
このファイルはこのガイドの本体内で置き換えるには少し長すぎますが、これは `online
<http://github.com/Pylons/pyramid/blob/master/docs/tutorials/wiki2/src/views/tutorial/static/pylons.css>`_.
で利用可能です。


.. This CSS file will be accessed via
.. e.g. ``http://localhost:6543/static/pylons.css`` by virtue of the call to
.. ``add_static_view`` directive we've made in the ``__init__.py`` file.  Any
.. number and type of static assets can be placed in this directory (or
.. subdirectories) and are just referred to by URL or by using the convenience
.. method ``static_url``
.. e.g. ``request.static_url('{{package}}:static/foo.css')`` within templates.

このCSSファイルは私たちが ``__init__.py`` ファイルの中で行なった ``add_static_view`` の宣言の呼び出しのおかげで
例えば ``http://localhost:6543/static/pylons.css`` を介してアクセスされます。
静的なアセットの任意の数と種類はこのディレクトリ(またはサブディレクトリ)に配置することができ、
URLによって参照されるか、便利なメソッド ``static_url`` を使用します。
例えばテンプレート内で ``request.static_url('{{package}}:static/foo.css')``


Adding Routes to ``__init__.py``
================================

.. The ``__init__.py`` file contains
.. :meth:`pyramid.config.Configurator.add_route` calls which serve to add routes
.. to our application.  First, we’ll get rid of the existing route created by
.. the template using the name ``'home'``. It’s only an example and isn’t
.. relevant to our application.

``__init__.py`` ファイルにはアプリケーションにルートを追加するのに役立つ
:meth:`pyramid.config.Configurator.add_route` の呼び出しが含まれます。
最初に、 ``'home'`` という名前を使用しているテンプレートによって作成された既存のルートを取り除きます。
これは例のみで、私たちのアプリケーションには関係ありません。


.. We then need to add four calls to ``add_route``.  Note that the *ordering* of
.. these declarations is very important.  ``route`` declarations are matched in
.. the order they're found in the ``__init__.py`` file.

私たちはその後、 ``add_route`` を4回呼び出すことが必要です。なお、これらの宣言の *順番* は非常に重要です。
``ルート`` 宣言はそれらが ``__init__.py`` ファイルの中で見つかった順番でマッチされます。


.. #. Add a declaration which maps the pattern ``/`` (signifying the root URL)
..    to the route named ``view_wiki``.  It maps to our ``view_wiki`` view
..    callable by virtue of the ``@view_config`` attached to the ``view_wiki``
..    view function indicating ``route_name='view_wiki'``.

1. ``view_wiki`` というルート名に ``/`` というマップのパターン(意味しているのはルートURL)の宣言を追加します。 It maps to our ``view_wiki`` view
   callable by virtue of the ``@view_config`` attached to the ``view_wiki``
   view function indicating ``route_name='view_wiki'``.


.. #. Add a declaration which maps the pattern ``/{pagename}`` to the route named
..    ``view_page``.  This is the regular view for a page.  It maps
..    to our ``view_page`` view callable by virtue of the ``@view_config``
..    attached to the ``view_page`` view function indicating
..    ``route_name='view_page'``.

2. ``view_page`` というルート名に ``/{pagename}`` というマップのパターンの宣言を追加します。これはページへの通常のビューです。 It maps
   to our ``view_page`` view callable by virtue of the ``@view_config``
   attached to the ``view_page`` view function indicating
   ``route_name='view_page'``.


.. #. Add a declaration which maps the pattern ``/add_page/{pagename}`` to the
..    route named ``add_page``.  This is the add view for a new page.  It maps
..    to our ``add_page`` view callable by virtue of the ``@view_config``
..    attached to the ``add_page`` view function indicating
..    ``route_name='add_page'``.

3. ``add_page`` というルート名に ``/add_page/{pagename}`` というマップのパターンの宣言を追加します。これは新しいページを追加するためのビューです。 It maps
   to our ``add_page`` view callable by virtue of the ``@view_config``
   attached to the ``add_page`` view function indicating
   ``route_name='add_page'``.


.. #. Add a declaration which maps the pattern ``/{pagename}/edit_page`` to the
..    route named ``edit_page``.  This is the edit view for a page.  It maps
..    to our ``edit_page`` view callable by virtue of the ``@view_config``
..    attached to the ``edit_page`` view function indicating
..    ``route_name='edit_page'``.

4. ``edit_page`` というルート名に ``/{pagename}/edit_page`` というマップのパターンの宣言を追加します。これはページの編集ビューです。 It maps
   to our ``edit_page`` view callable by virtue of the ``@view_config``
   attached to the ``edit_page`` view function indicating
   ``route_name='edit_page'``.


.. As a result of our edits, the ``__init__.py`` file should look
.. something like:

私たちの編集の結果として ``__init__.py`` ファイルはこのようになるはずです:


.. literalinclude:: src/views/tutorial/__init__.py
   :linenos:
   :language: python
   :emphasize-lines: 13-16

(The highlighted lines are the ones that need to be added or edited.)


.. Viewing the Application in a Browser

ブラウザでアプリケーションを見る
====================================

.. We can finally examine our application in a browser (See
.. :ref:`wiki2-start-the-application`).  The views we'll try are
.. as follows:

私たちはブラウザで私たちのアプリケーションを最終的に調べることができます (:ref:`wiki2-start-the-application` 参照) 。ビューを見るのは次のとおりです。


.. - Visiting ``http://localhost:6543`` in a browser invokes the
..   ``view_wiki`` view.  This always redirects to the ``view_page`` view
..   of the FrontPage page object.

- ブラウザで ``http://localhost:6543`` にアクセスすると ``view_wiki`` ビューを呼び出します。
  これは常にFrontPageページオブジェクトの ``view_page`` ビューにリダイレクトします。


.. - Visiting ``http://localhost:6543/FrontPage`` in a browser invokes
..   the ``view_page`` view of the front page page object.

- ブラウザで ``http://localhost:6543/FrontPage`` にアクセスするとフロントページのページオブジェクトの ``view_page`` ビューを呼び出します。


.. - Visiting ``http://localhost:6543/FrontPage/edit_page`` in a browser
..   invokes the edit view for the front page object.

- ブラウザで ``http://localhost:6543/FrontPage/edit_page`` にアクセスするとフロントページのページオブジェクトのための編集ビューを呼び出します。


.. - Visiting ``http://localhost:6543/add_page/SomePageName`` in a
..   browser invokes the add view for a page.

- ブラウザで ``http://localhost:6543/add_page/SomePageName`` にアクセスするとページのための追加ビューを呼び出します。


.. Try generating an error within the body of a view by adding code to
.. the top of it that generates an exception (e.g. ``raise
.. Exception('Forced Exception')``).  Then visit the error-raising view
.. in a browser.  You should see an interactive exception handler in the
.. browser which allows you to examine values in a post-mortem mode.

それのトップに例外を生成するコードを追加して、ビューの本体内でエラーを生成してみてください。(例えば ``raise Exception('Forced Exception')``)
次にブラウザでエラーが発生しているビューにアクセスします。
ブラウザにインタラクティブな例外ハンドラが表示され、検死モードで値を調べることができるはずです。
